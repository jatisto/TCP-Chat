@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Chat</title>
</head>
 
<body>
<a type="button" class="btn btn-xs btn-white btn-block"  value="Войти в груповой чат" href="~/Home/ChatGroup">ChatGroup</a>

@await Component.InvokeAsync("ListConnectionComponent")

    <!-- <div id="loginBlock" style="width: 450px;">
        Введите логин:<br />
        <input id="userName" type="text"  class="form-control"/>
        <input id="userPassword" type="text" class="form-control"/>
        <input id="loginBtn" type="button" value="Войти"  class="btn btn-w-m btn-warning"/>
    </div> -->

<input type="button" onclick="LoginChat2()" class="btn btn-primary block full-width m-b" value="Войти"/>

<div class="modal fade" id="Login">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <div class="row">
                    <div class="col-md-6 center" style="margin-right: 610px;">
                       
                            <form class="m-t" role="form" action="index.html">
                    <div id="loginBlock" >
                        <div class="form-group">
                            <input id="userName" type="text" placeholder="Введите логин"  class="form-control"/>
                        </div>
                        <div class="form-group">
                            <input id="userPassword" type="text" placeholder="Введите пароль" class="form-control"/>
                        </div>
                    </div>
                    </form>
                      
                         <input id="loginBtn" type="button" class="btn btn-primary block full-width m-b" value="Войти"/>
                    </div>
                </div>
            </div>
        
        </div>
    </div>
</div>

          <div class="ibox-content m-b-sm border-bottom marginmy" style="position: relative" id="inputForm">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label class="control-label" for="product_name">Сообщение</label>
                            <input type="text" id="message" placeholder="Введите сообщение" class="form-control"/>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="form-group">
                            <label class="control-label" for="price">Кому</label>
                            <input type="text" id="receiver" placeholder="Введите получателя" class="form-control" style="width: 170px;"/>
                        </div>
                    </div>   

                     <input type="button" id="sendBtn"  value="Отправить"  class="btn btn-w-m btn-success btnmy" style="margin-left: 15px;"/>                
                </div>                
                 <div class="chat-message left" id="chatroom"></div>
            </div>

    <!-- <div id="chatroom"></div> -->

    
   
 


    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        function LoginChat2() {
               $("#Login").modal();
               }


        let token;
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/chat", { accessTokenFactory: () => token})
            .build();
        hubConnection.on("Receive", function (message, userName) {
 
            // создаем элемент <b> для имени пользователя
            let userNameElem = document.createElement("b");
            userNameElem.style.fontSize = "17pt";
            userNameElem.style.color = "#25262F";
            userNameElem.appendChild(document.createTextNode(userName + ": "));
 
            // создает элемент <p> для сообщения пользователя
            let elem = document.createElement("p");
            elem.style.fontSize = "17pt";
            elem.style.color = "#25262F";
            elem.appendChild(userNameElem);
            elem.appendChild(document.createTextNode(message));
 
            var firstElem = document.getElementById("chatroom").firstChild;
            document.getElementById("chatroom").insertBefore(elem, firstElem);
        });
        hubConnection.on("Notify", function (message) {
             
            // создает элемент <p> для сообщения пользователя
            let elem = document.createElement("p");
            elem.style.fontSize = "17pt";
            elem.style.color = "#A1A1A6";
            elem.appendChild(document.createTextNode(message));
 
            var firstElem = document.getElementById("chatroom").firstChild;
            document.getElementById("chatroom").insertBefore(elem, firstElem);
        });

        hubConnection.on("NotifyDisconnected", function (message) {
             
            // создает элемент <p> для сообщения пользователя
            let elem = document.createElement("p");
            elem.style.fontSize = "20pt";
            elem.style.color = "#A1A1A6";
            elem.appendChild(document.createTextNode(message));
 
            var firstElem = document.getElementById("chatroom");

            for (let i = 0; i < firstElem.length; i++) {
                if (firstElem.options[i].value == message ) {
                    firstElem.remove(i);
                }
            }
        });
 
        // аутентификация
        document.getElementById("loginBtn").addEventListener("click", function (e) {
             
            var request = new XMLHttpRequest();
            request.open("POST", "/token", true);
            request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            request.addEventListener("load", function () {
                if (request.status < 400) { // если запрос успешный
 
                    let data = JSON.parse(request.response);    
                    token = data.access_token;
 
                    document.getElementById("sendBtn").disabled = false;
 
                    hubConnection.start()       // начинаем соединение с хабом
                    .catch(err => {  
                        console.error(err.toString());
                        document.getElementById("loginBtn").disabled = true;
                        document.getElementById("sendBtn").disabled = true;
                    });
                }
                else {
                    console.log("Status", request.status);
                    console.log(request.responseText);
                }
            });
            // отправляем запрос на аутентификацию
            request.send("username=" + document.getElementById("userName").value +
                "&password=" + document.getElementById("userPassword").value);
        });
        // отправка сообщения на сервер
        document.getElementById("sendBtn").addEventListener("click", function (e) {
            let message = document.getElementById("message").value;
            let to = document.getElementById("receiver").value;
            hubConnection.invoke("Send", message, to);
        });
    </script>

    
    
</body>
</html>